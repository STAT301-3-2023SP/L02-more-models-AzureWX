---
title: "L02 More Models"
subtitle: "Data Science 3 with R (STAT 301-3)"
author: "Willie Xie"
format:
  html:
    toc: true
    embed-resources: true
    code-fold: true
    link-external-newwindow: true
execute:
  warning: false
from: markdown+emoji  
editor_options: 
  chunk_output_type: console
---

## Github Repo Link

::: {.callout-important}

To link to your github **repo**sitory, appropriately edit the example link below. Meaning replace `https://your-github-repo-url` with your github repo url. Suggest verifying the link works before submitting.

[https://github.com/STAT301-3-2023SP/L02-more-models-AzureWX](https://github.com/STAT301-3-2023SP/L02-more-models-AzureWX)

:::

## Overview

The main goals of this lab are (1) review and practice the application of machine learning within the `tidymodels` framework and (2) introduce and explore a few new model types.

## Dataset

We will be utilizing `wildfires.csv` dataset contained in the **data** subdirectory. `wildfires_codebook.html` provides a quick overview of the data which is where students should begin.

## Instructions

A wildlife protection area is located in the park from which this data was collected and we want to predict whether or not a wildfire will reach it (`wlf`) given all the other variables in our dataset except for `burned` (we will be using it as a target variable in the future).

Using the `tidymodels` framework, pick the best model from the following candidate models:

1.  elastic net

    -   tune `mixture` and `penalty`
    -   include all two-way interactions

2.  Nearest neighbors

    -   tune number of `neighbors`

3.  Random forest

    -   tune `mtry` and `min_n`

4.  Boosted tree

    -   tune `mtry`, `min_n`, and `learn_rate`

5.  Support vector machine (polynomial)

    -   tune `cost`, `degree`, and `scale_factor` (default values are sufficient, free to change if you want)

6.  Support vector machine (radial basis function)

    -   tune `cost` and `rbf_sigma` (default values a sufficient, free to change if you want)

7.  Single Layer Neural Network (multilayer perceptron --- mlp)

    -   tune `hidden_units` and `penalty` (default values a sufficient, free to change if you want)
    -   `nnet` for the engine will be easiest, Alternatively, you might want to try `keras` if you can get it installed ([Keras Installation](https://tensorflow.rstudio.com/guide/keras/)).
    
8. Multivariate adaptive regression splines (MARS)

    - tune `num_terms` (need to supply upperbound) and `prod_degree` (defualt works here)

Some general notes:

- For tuning we suggest using 5 folds and 3 repeats. 
- Make sure you specify which performance measure you are using to pick the best model.
- Almost all work should be done in R scripts and you will only be reporting the results (we will see the R scripts in your repo).
- Suggest using jobs.
- A basic layout is suggested/provided. 
- We also want to collect how long it takes the tuning process for each model type. We can use the `tictoc` package --- code is provided in the `template_tune.R`.

## What should be turned in

A short write-up that includes:

1. A nicely formatted table that lists the 8 general types of model and the best performance it achieved. 

2. A nicely formatted table that lists the run time for the tuning process for the 8 model types (could be combined with first table).

3. Final selection, training, and evaluation of the best model. 

```{r}
library(tidyverse)
library(tidymodels)
library(gt)
library(gtExtras)

model_sum = read_rds('model_info/model_sum.rds')

actual_colnames = colnames(model_sum)
desired_colnames = actual_colnames %>%
  str_to_title() %>%
  str_replace('_', ' ')
names(desired_colnames) = actual_colnames

model_sum %>%
  gt() %>%
  cols_label(.list = desired_colnames) %>%
  tab_spanner(
    label = md('**Roc Auc**'), columns = 3:5
  ) %>%
  tab_spanner(
    label = md('**Model Parameters**'), columns = 6:18
  ) %>%
  tab_header(title = 'Model Performance') %>%
  cols_align(align = 'left') %>%
  sub_missing(missing_text = '-') %>%
  gt_theme_538() %>%
  gt_color_rows(columns = runtime, domain = c(0, 200), palette = c('blue', 'red')) %>%
  gt_color_rows(columns = mean, domain = c(0.75,1), palette = c('blue', 'red')) %>%
  fmt_number(columns = everything(), n_sigfig = 3)

ggplot(model_sum, aes(model, mean)) +
  geom_point() +
  geom_errorbar(aes(ymin = mean - 1.96*std_err, ymax = mean + 1.96*std_err)) +
  scale_y_continuous(breaks = seq(0.5, 1, 0.02)) +
  scale_x_discrete(limits = (model_sum %>% arrange(desc(mean)))$model) +
  coord_flip() +
  labs(
    title = 'Model Performance',
    x = 'Model', y = 'Roc Auc'
  )
```

From the table, it appears that the best model is the elastic net with an extremely
high Roc Auc of 0.910 followed by a single layer neural network at 0.897 and
SVM with a polynomial boundaries at 0.890. The worst performing model based on
the Roc Auc is the K-nearest neighbors, but it also has the fastest runtime of 9.23 seconds.
In contrast, the elastic net and neural network both have has medium runtime of 27.5
and 46.7 seconds while the SVM polynomial has an extremely long runtime of 129 seconds.

From the table, while the elastic net has the highest mean Roc Auc, a 95\% Roc Auc
confidence interval suggest that the elastic net, neural network, and SVM polynomial
perform roughly the same. But, overall, since the elastic net has the highest Roc Auc
while a medium time to process, the elastic net is most likely the best model.

```{r}
final_fit = read_rds('model_info/final_model.rds')
final_fit %>% collect_metrics()
final_fit %>% collect_predictions() %>%
  conf_mat(truth = wlf, estimate = .pred_class) %>%
  autoplot(type = 'heatmap')
```

Training the elastic net model on the training data, the Roc Auc from the
testing data is similar at 0.887. The model also has a decent accuracy at 0.782.
From the confusion, it appears that the model correctly predicts yes when the
actual value is yes $\frac{35}{35+12} = 0.745$ about the same as correctly
predicting no when the actual value is no $\frac{44}{44+10} = 0.815$.
So, the model performs equally well in predicting if a wildfire reaches or
not reaches a protection area.

## Github Repo Link

[https://github.com/STAT301-3-2023SP/L02-more-models-AzureWX](https://github.com/STAT301-3-2023SP/L02-more-models-AzureWX){target="_blank"}

